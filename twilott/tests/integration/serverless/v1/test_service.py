# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from tests import IntegrationTestCase
from tests.holodeck import Request
from twilio.base.exceptions import TwilioException
from twilio.http.response import Response


class ServiceTestCase(IntegrationTestCase):

    def test_list_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.serverless.v1.services.list()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://serverless.twilio.com/v1/Services',
        ))

    def test_read_empty_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "services": [],
                "meta": {
                    "first_page_url": "https://serverless.twilio.com/v1/Services?PageSize=50&Page=0",
                    "key": "services",
                    "next_page_url": null,
                    "page": 0,
                    "page_size": 50,
                    "previous_page_url": null,
                    "url": "https://serverless.twilio.com/v1/Services?PageSize=50&Page=0"
                }
            }
            '''
        ))

        actual = self.client.serverless.v1.services.list()

        self.assertIsNotNone(actual)

    def test_fetch_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://serverless.twilio.com/v1/Services/ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_fetch_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "sid": "ZS00000000000000000000000000000000",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "test-service",
                "unique_name": "test-service-1",
                "include_credentials": true,
                "ui_editable": false,
                "domain_base": "test-service-1-1234",
                "date_created": "2018-11-10T20:00:00Z",
                "date_updated": "2018-11-10T20:00:00Z",
                "url": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000",
                "links": {
                    "environments": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Environments",
                    "functions": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Functions",
                    "assets": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Assets",
                    "builds": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Builds"
                }
            }
            '''
        ))

        actual = self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.assertIsNotNone(actual)

    def test_delete_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").delete()

        self.holodeck.assert_has_request(Request(
            'delete',
            'https://serverless.twilio.com/v1/Services/ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_delete_response(self):
        self.holodeck.mock(Response(
            204,
            None,
        ))

        actual = self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").delete()

        self.assertTrue(actual)

    def test_create_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.serverless.v1.services.create(unique_name="unique_name", friendly_name="friendly_name")

        values = {'UniqueName': "unique_name", 'FriendlyName': "friendly_name", }

        self.holodeck.assert_has_request(Request(
            'post',
            'https://serverless.twilio.com/v1/Services',
            data=values,
        ))

    def test_create_response(self):
        self.holodeck.mock(Response(
            201,
            '''
            {
                "sid": "ZS00000000000000000000000000000000",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "service-friendly",
                "unique_name": "service-unique",
                "include_credentials": true,
                "ui_editable": false,
                "domain_base": "service-unique-1234",
                "date_created": "2018-11-10T20:00:00Z",
                "date_updated": "2018-11-10T20:00:00Z",
                "url": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000",
                "links": {
                    "environments": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Environments",
                    "functions": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Functions",
                    "assets": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Assets",
                    "builds": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Builds"
                }
            }
            '''
        ))

        actual = self.client.serverless.v1.services.create(unique_name="unique_name", friendly_name="friendly_name")

        self.assertIsNotNone(actual)

    def test_update_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").update()

        self.holodeck.assert_has_request(Request(
            'post',
            'https://serverless.twilio.com/v1/Services/ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        ))

    def test_update_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "sid": "ZS00000000000000000000000000000000",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "service-friendly-update",
                "unique_name": "service-unique-update",
                "include_credentials": true,
                "ui_editable": true,
                "domain_base": "service-unique-update-1234",
                "date_created": "2018-11-10T20:00:00Z",
                "date_updated": "2018-11-10T20:00:00Z",
                "url": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000",
                "links": {
                    "environments": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Environments",
                    "functions": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Functions",
                    "assets": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Assets",
                    "builds": "https://serverless.twilio.com/v1/Services/ZS00000000000000000000000000000000/Builds"
                }
            }
            '''
        ))

        actual = self.client.serverless.v1.services("ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").update()

        self.assertIsNotNone(actual)
